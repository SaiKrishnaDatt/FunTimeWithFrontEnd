JavaScript:

What is JS
including JS
basics of JS
variables and types
conditionals
Functions
Scopes
Closures
Objects and Arrays
Looping 


What is javascript:
object oriented - prototypical inheritance instead of class-based

Dynamic
often considered type-less , but instead is dynamically typed. Can opt-into type-checking too .(by using high level language like 'TypeScript' and 'CopyScript' )

Compiled?
considered an interpreted language , but in many cases the code is 'just-in-time' compiled like other high performing languages like c# and java



-----------------------
Sample First program

<script type="text/javascript">
            var msg = "Hello JavaScript"
            alert(msg);
        </script>




        complete html
        <!DOCTYPE html>
<html>
    <head>
    	<title> Github Hub</title>
    	<!--[if lt IE 9]>
    		<script src="//html5shiv.google.com/svn/trunk/html15.js"></script>
    		<[endif]-->

    	<link rel = "stylesheet" href="css/site.css" />
        <script type="text/javascript">
            var msg = "Hello JavaScript"
            alert(msg);
        </script>
	</head>
	<body>
		<header>

             <nav>
            <ul>
            <li><a href="/index.html"> Home</a></li>
            <li><a href ="/contact.html">Contact</a></li>
            <li><a href= "/about.html">About</a></li>

        </ul>
        </nav>
         <div> <img src="img/github.jpg" class = "bordered-image"/> Github Hub</div>
         <div> This is a <em> sample site </em>to search Github for interseting projects</divfs>
       
        <div class = "container">
         </header>
         <section id ="main">
         	<p> In this sample site , we'll show a list of <a href = "https://github.com/">Github</a> projects and the data abut <strong>those projects</strong></p>
         	<form action = "http://wilder.azurewebsites.net/echo" method ="POST" 
            class = "bordered-image simple-form">
         		<label for ="searchPhrases" > Search Phrase : </label>
         		<input name = "searchPhrases" id ="searchPhrases" /></br>
         		<input type = "checkbox" name = "useStars"  id ="useStars" checked ="true" /> 
         		<label for="useStars">Use Stars?</label></br>
         	    <label >Language:</label>
         		<select name ="langChoice">
         			<option> ALL</option>
         			<option> JavaScript</option>
         			<option selected> C#</option>
         			<option> Java</option>
         			<option> Ruby</option>
         		</select>
         	</br>
         		<input type = "submit" value = "Search"/></br>
         	</form>
            <div id="results" class="bordered-image">
                This is where result will live ... eventually.
            </div>
         </section>
         <footer>
         	&copy; 2019 Sai Krishna 
         </footer>
     </div>
     </body>
	</body>
</html>


we usually don't use alert()  we use conosle.log(msg)
<script type="text/javascript">
            var msg = "Hello JavaScript"
            console.log(msg);
        </script>


        <!DOCTYPE html>
<html>
    <head>
    	<title> Github Hub</title>
    	<!--[if lt IE 9]>
    		<script src="//html5shiv.google.com/svn/trunk/html15.js"></script>
    		<[endif]-->

    	<link rel = "stylesheet" href="css/site.css" />
	</head>
	<body>
		<header>

             <nav>
            <ul>
            <li><a href="/index.html"> Home</a></li>
            <li><a href ="/contact.html">Contact</a></li>
            <li><a href= "/about.html">About</a></li>

        </ul>
        </nav>
         <div> <img src="img/github.jpg" class = "bordered-image"/> Github Hub</div>
         <div> This is a <em> sample site </em>to search Github for interseting projects</divfs>
       
        <div class = "container">
         </header>
         <section id ="main">
         	<p> In this sample site , we'll show a list of <a href = "https://github.com/">Github</a> projects and the data abut <strong>those projects</strong></p>
         	<form action = "http://wilder.azurewebsites.net/echo" method ="POST" 
            class = "bordered-image simple-form">
         		<label for ="searchPhrases" > Search Phrase : </label>
         		<input name = "searchPhrases" id ="searchPhrases" /></br>
         		<input type = "checkbox" name = "useStars"  id ="useStars" checked ="true" /> 
         		<label for="useStars">Use Stars?</label></br>
         	    <label >Language:</label>
         		<select name ="langChoice">
         			<option> ALL</option>
         			<option> JavaScript</option>
         			<option selected> C#</option>
         			<option> Java</option>
         			<option> Ruby</option>
         		</select>
         	</br>
         		<input type = "submit" value = "Search"/></br>
         	</form>
            <div id="results" class="bordered-image">
                This is where result will live ... eventually.
            </div>
         </section>
         <footer>
         	&copy; 2019 Sai Krishna 
         </footer>
     </div>
      <script type="text/javascript">
            var msg = "Hello JavaScript";
            console.log(msg);
            var resultsDiv = document.getElementById("results");
            resultsDiv.innerHTML = "<p>This is from javascript </p>";
        </script>
     </body>
	</body>
</html>



we placed the scipt at the bottom becuase if it was placed at beginning , all the elements are not loaded so it was not working .
------------------------------------------------------------
including javascript


index.js:
/* 

index.js
*/


            var msg = "Hello JavaScript";
            console.log(msg);
            var resultsDiv = document.getElementById("results");
            resultsDiv.innerHTML = "<p>This is from javascript </p>";
        

index.html

<!DOCTYPE html>
<html>
    <head>
    	<title> Github Hub</title>
    	<!--[if lt IE 9]>
    		<script src="//html5shiv.google.com/svn/trunk/html15.js"></script>
    		<[endif]-->

    	<link rel = "stylesheet" href="css/site.css" />
	</head>
	<body>
		<header>

             <nav>
            <ul>
            <li><a href="/index.html"> Home</a></li>
            <li><a href ="/contact.html">Contact</a></li>
            <li><a href= "/about.html">About</a></li>

        </ul>
        </nav>
         <div> <img src="img/github.jpg" class = "bordered-image"/> Github Hub</div>
         <div> This is a <em> sample site </em>to search Github for interseting projects</divfs>
       
        <div class = "container">
         </header>
         <section id ="main">
         	<p> In this sample site , we'll show a list of <a href = "https://github.com/">Github</a> projects and the data abut <strong>those projects</strong></p>
         	<form action = "http://wilder.azurewebsites.net/echo" method ="POST" 
            class = "bordered-image simple-form">
         		<label for ="searchPhrases" > Search Phrase : </label>
         		<input name = "searchPhrases" id ="searchPhrases" /></br>
         		<input type = "checkbox" name = "useStars"  id ="useStars" checked ="true" /> 
         		<label for="useStars">Use Stars?</label></br>
         	    <label >Language:</label>
         		<select name ="langChoice">
         			<option> ALL</option>
         			<option> JavaScript</option>
         			<option selected> C#</option>
         			<option> Java</option>
         			<option> Ruby</option>
         		</select>
         	</br>
         		<input type = "submit" value = "Search"/></br>
         	</form>
            <div id="results" class="bordered-image">
                This is where result will live ... eventually.
            </div>
         </section>
         <footer>
         	&copy; 2019 Sai Krishna 
         </footer>
     </div>
    <script type="text/javascript" src = "js/index.js">
            </script>
     </body>
	</body>
</html>



----------------------

variables and types:

/* 

index.js
*/


            var msg = "Hello JavaScript";
            console.log(msg);
            var resultsDiv = document.getElementById("results");
            resultsDiv.innerHTML = "<p>This is from javascript </p>";

            console.log("msg is " + typeof(msg));
            console.log("resultsDiv is "+ typeof(resultsDiv));

            var none;
            console.log("none is" + typeof(none));


            var aNumber =0 ;
            console.log("aNumber  is " + typeof(aNumber));

            var trueFalse = false;
            console.log("trueFalse is " + typeof(trueFalse));

            nonexistent =" this  shouldn't work"

            

            the last nonexistent one is directly assigned without being declared this is allowed in javascript but it will cause problem when users misspell some variables 

            so we use "use strict" at the begining of the javascript file.



-------------------------------------------------------------------------------------

Conditions 

if(..) {}
else if(.. ) {}

example: 
if(none == undefined){
            	console.log("none is undefined");
            }

            if(aNumber == "10")
            {
            	console.log("10 is 10");

            }

            if(aNumber === "10")
            {
            	console.log("10 is 10");
            	
            }
----------------------------------------

Functions in JS

function is a keyword
function showMsg(msg){
	console.log("showMsg:"+ msg);

}
showMsg("some Information");

one problem with functions is overloading
function showMsg(msg){
	console.log("showMsg:"+ msg);

}


function showMsg(msg,more){
	console.log("showMsg:" +msg + more);
}

showMsg("some Information"); --> both will call showMsg with two arguements
showMsg("some Information","and even more"); --> both will call showMsg with two arguements


second showMsg(msg,more) is overwritten the first one so in reallity there is only one message available .

How to handle this

function showMsg(msg,more){
if(more){	console.log("showMsg:" +msg + more);
}
else {
	console.log("showMsg:" +msg);
}
}

showMsg("some Information");
showMsg("some Information","and even more");

funciton  are first citizens as datatypes


------------------------------------

function showMsg(msg,more){
if(more){	console.log("showMsg:" +msg + more);
}
else {
	console.log("showMsg:" +msg);
}
}

showMsg("some Information");
showMsg("some Information","and even more");

var showIt = function (msg){
	console.log(msg);
}

showIt("some messsage");
 
function showItThen(msg,callback){
	showIt(msg);
	callback();

}

showItThen("showItthen called",function (){
console.log("callback called");
});

function is passed as argument to another funciton 
-----------------------------------------------------
scopes: all the variable are global copes 

in java script funcitons only create scopes


var inGlobal= true;

function testMe(){
	console.log("testMe(): " + inGlobal);

	var someMsg = "some messsage";
	console.log("testMe(): "+ someMsg);

}

console.log("testMe(): "+ someMsg);

testMe();


----------------------------

closures in javascript:
Allows access to outer variable within inner scopes
Regardless of LifeTime
--------------------------------------------------
//javascript
var x =1 ;
 function someFunction(){
 //works as it wraps 'x' with a closure
 var y=x;
 }

 //much Later

 someFunction();

 }
 --------------------------------------------

 Objects and Arrays


below "result" is a object
 var result = {
      name : "jquery";
      language : "JavaScript",
      score: 4.5
      showLog : function (){
            
      }
,
owner: {
      login : "krishnadutt",
      id : 5967
}
};

//we can add property to object at any point 

result.phoneNumber ="1123-456-7890"

console.log(result.phoneNumber);
 

Arrays:
var result = {
      name : "jquery";
      language : "JavaScript",
      score: 4.5
      showLog : function (){
            
      }
,
owner: {
      login : "krishnadutt",
      id : 5967
}
};

//we can add property to object at any point 

result.phoneNumber ="1123-456-7890"

console.log(result.phoneNumber);

var resluts = [{
      name : "jquery";
      language : "JavaScript",
      score: 4.5
      showLog : function (){
            
      }
,
owner: {
      login : "krishnadutt",
      id : 5967
}
},{
      name : "jquery UI";
      language : "JavaScript",
      score: 4.5
      showLog : function (){
            
      }
,
owner: {
      login : "krishnadutt",
      id : 5967
}
}];
resluts.push(result);
results.push({
      name: "dummy project"
})

console.log(results.lenght);
console.log(results[0]);




-------------------------------------
Looping :

/* 

index.js
*/

            "use strict"
            var msg = "Hello JavaScript";
            console.log(msg);
            var resultsDiv = document.getElementById("results");
            resultsDiv.innerHTML = "<p>This is from javascript </p>";

var result = {
      name : "jquery",
      language : "JavaScript",
      score: 4.5,
      showLog : function (){
            
      }
,
owner: {
      login : "krishnadutt",
      id : 5967
}
};

//we can add property to object at any point 

result.phoneNumber ="1123-456-7890"

console.log(result.phoneNumber);

var resluts = [{
      name : "jquery",
      language : "JavaScript",
      score: 4.5,
      showLog : function (){
            
      }
,
owner: {
      login : "krishnadutt",
      id : 5967
}
},{
      name : "jquery UI",
      language : "JavaScript",
      score: 4.5,
      showLog : function (){
            
      }
,
owner: {
      login : "krishnadutt",
      id : 5967
}
}];

resluts.push(result);
resluts.push({
      name: "dummy project"
})

console.log(resluts.length);
console.log(resluts[0]);

for(var x=0 ;x< results.lenght; x++){
      var result = results[x];
      console .log(result);
}


####Second Review:

Java script is used on the vast majority of websites and is supported by every major browser.
Games can be created using JS using - Unity, a game engine for 3D and 2D games.
JS is embraced by a scaleable language called TypeScript.
JS is not just for applications which run in browsers on the web. You can also create native applications for smartphones and tablets using JS. -->Apache Cordova.
JS can also be used to create full fledged applications for the Mac and windows desktops - Electron.
Writing server-side code can also be accomplished in JS -- Node.js

For Js we need Node.js , we need the npm package manager which comes bundled with it.

github.com/pluralsight/web-dev-starter

always run npm install from a command promppt.

sudo npm install
npm run start -> this will startup server and open ups browser for us.  because of lite server , when we change the source code it will recompile and refresh the browser.
```
npm install lite-server --save-dev. Install light-server locally and save it to your development environment by running this.
```


npm start errors:
1. verbose stack at ChildProcess.<anonymous>
```
rm -rf node_modules

rm package-lock.json

rm yarn.lock

npm cache clear --force

npm install
```


function showMessage(message){
	document.getElementById('message').textContent = message;
}


alert("HelloWorld");
console.log("HelloWorld");

var keyword is legacy  --> no way you can declare constants using var.
if(true) {
var value = 'yes';
console.log(value); --> `yes`
}
console.log(value); --> yes.  this is out of the scope that is why var is not prefered

let is the keyword we use to create a new variable.
let  product = 'Rahul Dravid'
const keyword for constants

Question : 

let x = 1.1+1.3;
console.log(x) ->> 2.40000000004 ? 

why is this the case?

ans: 
if(1.1+1.3 !=2.4) 
console.log(`true`);   ---> true is printed.
hmm bad day😞 

so get it fixed with below syntax
if(+(1.1+1.3).toFixed(2) !=2.4)
consoel.log(`true`) --> nothing is printed  , wow we fixed it :dance

Question : 

let name = 'Dravid';
let fullName = `Rahul 


${name}`;
console.log(fullName);

ans ; in web page you see " Rahul Dravid" -> this is because all white space are considered as single space when working with <h1> header or other tags 
but 
in console you see "Rahul


Dravid"


Number to String 
let amount =10.2;
console.log(amount.toString());
console.log(typeOf amount.toString()); ---> string


string to number 

let amount = Number.parseFlot("134.23");
console.log(amount);
console.log(typeOf amount);   --> number
let amount = Number.parseFlot("A134.23");
conosle.log(amount) --> NaN
let amount = Number.parseFlot("134.23A");
console.log(amount) --> 134.23 as long the string is number the parse Will happens once it encounters the char it will stop parsing further. and return already parsed number.





null and undefined

let saved 
console.log(saved) -> undefined 

let saved =10;
saved =null;
console.log(saved) --> null  




let person = {
firstName : 'John' ,
lastName : 'Adams'
};

console.log(typeof person) --> object



falsy
truthy
false
0
""  or ''
null
undefined
NaN
every thing not falsy

== vs ====

if(1 == "1") {
consoel.log("true")
}
else
{
consoel.log("true")
}


output : true 
omg why is it so.
Js converts attempts to convert type.

if(1 === "1") {
consoel.log("true")
}
else
{
consoel.log("true")
}

output : false
this is because if we use === if they are different types then the value returned is false.  that is the reason always use ===



Functions:
function showYourScore(){
//write your code
}

function expression
let fn = function () {
//do some cool stuff
} 
fn();

let fn = function myFunction () { --> you can give the name but don't use it for calling the method 
//do some cool stuff
} 
fn();
myFunction() --> this will through error , this is only for debugging purpose.



Object : 
Symbol:
let mySymbol = Symbol();
let person ={
name: "Rahul",
age: 44,
[mySymbol] : 'secretInfo'. -> custom info only accessed within our code. the only code which can access this is the code which has access to mySymbol
};


Arrays
const  values = ['a','b','c'];
console.log(typeOf values);  --> object

console.log(Array.isArray(values)); -->  true.

values.push ('d') --> pushing element on to the array
values.pop()
values.shift() ---> shift the entire elements to left by one index
values.unshift()--> adds values to the beginning


Slice() and splice()  
Slice() -> created a brand new array  
const  values = ['a','b','c'];
const newValues = values.slice(1,2);    new array is created with ['b']
Splice()
-> specifically for deleting 
const  values = ['a','b','c','d'];
values.splice(1,2);
console.log(values) //a d

const  values = ['a','b','c'];
values.splice(1,0,'foo');  --->arg are index, numberOfitemsTodelete,insereted element
console.log(values) //a foo b c




global scopes ,
function scope 
Hoisting concept of using variable before it is declared --> this should be avoided
value = 137;
console.log(137);  --> 456; this is not correct we should get undefined error , this is the problem with var .. so avoid using it  and go for let
var value = 999;
value = 137;
console.log(137);  --> can't access value before
let value = 999;

hoisting is fine for methods 
demoFun()
function demoFun(){
console.log("test");
}

misc : few references :

const containers = document.getElementsByClassName('container');
containers[1].classList.add('d-none');
const button = document.getElementById('show-results');
button.addEventlistener('click',function(){
const result = document.getElementById('result');
if(result.classList.contains('d-none')){
result.classList.remove('d-none');
button.textContent='ClOSE RESULTS';
}
else{
result.classList.add('d-none');
button.textcontent = 'SHOW RESULTS';
}
} 
